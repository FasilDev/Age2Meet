#!/usr/bin/env python3
"""
Script de test pour v√©rifier que Swagger fonctionne
"""

import requests
import webbrowser
import time
import sys

BASE_URL = "http://localhost:8000"

def test_swagger():
    """Teste l'accessibilit√© de Swagger"""
    
    print("üîç Test de l'accessibilit√© de Swagger...")
    print("=" * 50)
    
    # Test 1: V√©rifier que le serveur fonctionne
    print("\n1. V√©rification du serveur...")
    try:
        response = requests.get(f"{BASE_URL}/admin/", timeout=5)
        print("‚úÖ Serveur Django accessible")
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur Django non accessible. Assurez-vous qu'il fonctionne avec:")
        print("   python manage.py runserver")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - le serveur met trop de temps √† r√©pondre")
        return False
    
    # Test 2: V√©rifier le sch√©ma OpenAPI
    print("\n2. Test du sch√©ma OpenAPI...")
    try:
        response = requests.get(f"{BASE_URL}/api/schema/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Sch√©ma OpenAPI g√©n√©r√© avec succ√®s")
            schema = response.json()
            print(f"   Version OpenAPI: {schema.get('openapi', 'N/A')}")
            print(f"   Titre: {schema.get('info', {}).get('title', 'N/A')}")
            print(f"   Version API: {schema.get('info', {}).get('version', 'N/A')}")
            print(f"   Nombre d'endpoints: {len(schema.get('paths', {}))}")
        else:
            print(f"‚ùå Erreur g√©n√©ration sch√©ma: {response.status_code}")
            print(f"   R√©ponse: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test du sch√©ma: {e}")
        return False
    
    # Test 3: V√©rifier Swagger UI
    print("\n3. Test de Swagger UI...")
    try:
        response = requests.get(f"{BASE_URL}/api/docs/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Swagger UI accessible")
        else:
            print(f"‚ùå Swagger UI non accessible: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test de Swagger UI: {e}")
        return False
    
    # Test 4: V√©rifier ReDoc
    print("\n4. Test de ReDoc...")
    try:
        response = requests.get(f"{BASE_URL}/api/redoc/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ ReDoc accessible")
        else:
            print(f"‚ùå ReDoc non accessible: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test de ReDoc: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ Swagger configur√© avec succ√®s !")
    print("\nüìã URLs disponibles:")
    print(f"   ‚Ä¢ Swagger UI: {BASE_URL}/api/docs/")
    print(f"   ‚Ä¢ ReDoc:      {BASE_URL}/api/redoc/") 
    print(f"   ‚Ä¢ Schema:     {BASE_URL}/api/schema/")
    
    # Proposer d'ouvrir Swagger
    choice = input("\nüåê Voulez-vous ouvrir Swagger UI dans votre navigateur ? (y/N): ")
    if choice.lower() in ['y', 'yes', 'o', 'oui']:
        print("üöÄ Ouverture de Swagger UI...")
        webbrowser.open(f"{BASE_URL}/api/docs/")
    
    return True

if __name__ == "__main__":
    try:
        success = test_swagger()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
        sys.exit(0) 